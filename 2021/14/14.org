* 14.1
Test data:
#+begin_src emacs-lisp
  (defun my-insert-after (l index item)
    "Change list l by inserting item after the item at the index position."
    (push item (cdr (nthcdr index l))) 
    l)


  (defun my-histogram (l)
    "create alist histogram of occurances in list as (value .amount)."
    (-map (lambda (x) (cons x (--count (equal x it) l)))
          (-distinct l)))


  (let ((l '(N N C B))
        (rules '(((C . H) . B)
                 ((H . H) . N)
                 ((C . B) . H)
                 ((N . H) . C)
                 ((H . B) . C)
                 ((H . C) . B)
                 ((H . N) . C)
                 ((N . N) . C)
                 ((B . H) . H)
                 ((N . C) . B)
                 ((N . B) . B)
                 ((B . N) . B)
                 ((B . B) . N)
                 ((B . C) . B)
                 ((C . C) . N)
                 ((C . N) . C))))

    (cl-loop repeat 10 do
             (cl-loop with idx = 0
                      until (not (nth (1+ idx) l))
                      do (let* ((current-pair (cons (nth idx l) (nth (1+ idx) l)))
                                (rules-idx (--find-index (equal (car it) current-pair) rules)))
                           (when (not (equal rules-idx '()))
                             (my-insert-after l idx (cdr (nth rules-idx rules)))
                             (setf idx (1+ idx))
                             )
                           (setf idx (1+ idx)))))
    (let ((hist (my-histogram l)))
      (- (cdr (--max-by (> (cdr it) (cdr other)) hist))
         (cdr (--min-by (> (cdr it) (cdr other)) hist)))))
#+end_src

#+RESULTS:
: 1588


Actual puzzle:
#+begin_src emacs-lisp
  (defun my-insert-after (lst index newelt)
    (push newelt (cdr (nthcdr index lst))) 
    lst)


  (defun my-histogram (l)
    "create alist histogram of occurances in list as (value .amount)"
    (-map (lambda (x) (cons x (--count (equal x it) l)))
          (-distinct l)))





  (let ((l '(K H S S C S K K C P F K P P B B O K V F))
        (rules '(((O . S) . N)
                 ((K . O) . O)
                 ((S . K) . B)
                 ((N . V) . N)
                 ((S . H) . V)
                 ((O . B) . V)
                 ((H . H) . F)
                 ((H . P) . H)
                 ((B . P) . O)
                 ((H . S) . K)
                 ((S . N) . B)
                 ((P . S) . C)
                 ((B . S) . K)
                 ((C . F) . H)
                 ((S . O) . C)
                 ((N . O) . H)
                 ((P . P) . H)
                 ((S . S) . P)
                 ((K . V) . B)
                 ((K . N) . V)
                 ((C . C) . S)
                 ((H . K) . H)
                 ((F . N) . C)
                 ((O . O) . K)
                 ((C . H) . H)
                 ((C . P) . V)
                 ((H . B) . N)
                 ((V . C) . S)
                 ((S . P) . F)
                 ((B . O) . F)
                 ((S . F) . H)
                 ((V . O) . B)
                 ((F . F) . P)
                 ((C . N) . O)
                 ((N . P) . H)
                 ((K . K) . N)
                 ((O . P) . S)
                 ((B . H) . F)
                 ((C . B) . V)
                 ((H . C) . P)
                 ((K . H) . V)
                 ((O . V) . V)
                 ((N . K) . S)
                 ((P . N) . F)
                 ((V . V) . N)
                 ((H . O) . S)
                 ((K . S) . C)
                 ((F . P) . F)
                 ((F . H) . F)
                 ((B . B) . C)
                 ((F . B) . V)
                 ((S . B) . K)
                 ((K . P) . B)
                 ((F . S) . C)
                 ((K . C) . P)
                 ((S . C) . C)
                 ((V . F) . F)
                 ((V . N) . B)
                 ((C . K) . C)
                 ((K . F) . H)
                 ((N . S) . C)
                 ((F . V) . K)
                 ((H . V) . B)
                 ((H . F) . K)
                 ((O . N) . S)
                 ((C . V) . N)
                 ((B . V) . F)
                 ((N . B) . N)
                 ((N . N) . F)
                 ((B . F) . N)
                 ((V . B) . V)
                 ((V . S) . K)
                 ((B . K) . V)
                 ((V . P) . P)
                 ((P . B) . F)
                 ((K . B) . C)
                 ((V . K) . O)
                 ((N . F) . F)
                 ((F . O) . F)
                 ((P . H) . N)
                 ((V . H) . B)
                 ((H . N) . B)
                 ((F . K) . K)
                 ((P . O) . H)
                 ((C . O) . B)
                 ((F . C) . V)
                 ((O . K) . F)
                 ((O . F) . V)
                 ((P . F) . F)
                 ((B . C) . B)
                 ((B . N) . O)
                 ((N . C) . K)
                 ((S . V) . H)
                 ((O . H) . B)
                 ((P . C) . O)
                 ((O . C) . C)
                 ((C . S) . P)
                 ((P . V) . V)
                 ((N . H) . C)
                 ((P . K) . H))))

    (cl-loop repeat 10 do
             (cl-loop with idx = 0
                      until (not (nth (1+ idx) l))
                      do (let* ((current-pair (cons (nth idx l) (nth (1+ idx) l)))
                                (rules-idx (--find-index (equal (car it) current-pair) rules)))
                           (when (not (equal rules-idx '()))
                             (my-insert-after l idx (cdr (nth rules-idx rules)))
                             (setf idx (1+ idx))
                             )
                           (setf idx (1+ idx)))))
    (let ((hist (my-histogram l)))
      (- (cdr (--max-by (> (cdr it) (cdr other)) hist))
         (cdr (--min-by (> (cdr it) (cdr other)) hist)))))
#+end_src

#+RESULTS:
: 5656
